# 23_10_25

# JavaScript Reference Data Types
오늘 한 일이 많아서 [한 일] 을 작성할 예정
## 함수 
Function
- 참조 자료형
- asdfasdfasdfasdf
### 함수 구조
- 함수의 이름
- 함수의 매개변수
- 함수의 body를 구성하는 statement 
- return 값이 없다면 undefined 를 반환

### 함수의 정의 2가지 방법
1. 선언식 (function declaration)
```js
fucnion funcName (){
  statemnets
}
```
2. 표현식 (function expression)
const funcName (asdfasdfasdf)


### [함수 표현식](한일.md/#함수-표현식)
- 함수 이름이 없는 '익명함수'를 사용할 수 있음
- 선언식과 달리 표현식으로 정의한 함수는 호이스팅 되지 않으므로 함수를 정의하기 전에 먼저 사용할 수 없다.

### 매개변수 정의방법 
1. 기본함수 매개 변수 (Default function parameter)
- 값이 없거나 undefined 가 전달될 경우 이름 붙은 매개 변수를 기본값으로 초기화
```js
// 기본 함수 매개변수
const greeting = function (name = 'Anonymous') {
  return `Hi ${name}`
}

console.log(greeting())
```
2. 나머지 매개변수 (Rest parameters)
- 임의의 수의 인자를 '배열'로 허용하여 가변 인자를 나타내는 방법
- 작성 규칙
  - 함수 정의 시 나머지 매개변수 하나만 작성할 수 있음
  - 나머지 매개변수는 함수 정의에서 매개변수 마지막에 위치해야 함
- 나머지 안넣으면, 빈 배열로 반환 ... 이 그것입니다

### [매개변수와 인자의 개수 불일치 (1/2)](./한일.md/#불일치)
- 매개 변수 개수 > 인자 개수
- > 누락된 인자는 undefined로 할당
```js
//  매개변수와 인자의 개수 불일치 허용
// 매개변수 개수 > 인자 개수
const threeArgs = function (num1, num2, num3) {
  return [num1, num2, num3]
}

console.log(threeArgs())
console.log(threeArgs(1))
console.log(threeArgs(2, 3))
```
### 매개변수와 인자의 개수 불일치 (2/2)
- 매개변수 개수 < 인자 개수
- > 초과 입력한 인자는 사용하지 않음 // 에러 없음

함수 쓸 때 명확하게 하자.

### '...' 전개구문 spread syntax
- 배열이나 문자열과 같이 반복 가능한 항목을 펼치는 것(확장, 전개)
- 전개 대상에 따라 역할이 다름
- > 배열이나 객체의 요소를 개별적인 값으로 분리하거나 다른 배열이나 객체의 요소를 현재 배열이나 객체에 추가하는 등
1. 함수와의 사용
   1. 함수 호출 시 인자 확장
   2. 나머지 매개변수 (압축)
2. 객체와의 사용(객체 파트에서 진행)
3. 배열과의 활용(배열 파트에서 진행)


#### 전개구문의 활용
- 함수와의 활용 
- 1. 함수 호출 시 인자 확장 (~~압축해제~~)
- 2. 나머지 매개변수(압축)
```js
  // 1. 함수 호출 시 인자 확장
  function myFunc(x, y, z) {
    return x + y + z
  }

  let numbers = [1, 2, 3] // 정상 경우
  let numbers = [1, ] // 적은 경우 NaN
  let numbers = [1, 2, 3,4,5,6,7] // 초과 // 버려버리고 문제 X 
  console.log(myFunc(...numbers)) // 6


  // 2. 나머지 매개변수
  function myFunc2(x, y, ...restArgs) {
    return [x, y, restArgs]
  }

  console.log(myFunc2(1, 2, 3, 4, 5)) // [1, 2, [3, 4, 5]]
  console.log(myFunc2(1, 2)) // [1, 2, []]
```

### 화살표 함수

```js
const arrow = name => `hello, ${name}`
// 함수 맞아요. 아래의 함수와 같아요...  
const arrow = function (name) {
  return `hello ${name}`
}
```

#### 작성과정 
1. funtion 키워드 제거 후 매개변수와 중괄호 사이에 화살표 => 작성.
2. 함수의 매개변수가 하나 뿐이라면 매개변수의 `()` 제거 가능(단, 생략을 권장하지 않음 // 명시성 이슈)
3. 함수 본문의 표현식이 한 줄이라면 `{}`, `return` 제거 가능
4. 하~이고
  
> 1단계가 보편적이다.
> 2단계부터는 명시성이 급격하게 떨어진다.

#### 화살표 심화
1. 인자가 없다면 () or _로 표시 가능
const noArgs1 = () => 'No args'
const noArgs2 = _ => 'No args'

2-1 object를 return 한다면 return을 명시적으로 작성해야 함

2-2 return을 작성하지 않으려면 객체를 소괄호로 감싸야 함
asdfasdf

#### 어디에 쓰나요? 

## Object 키로 구분된 데이터 집합을 저장하는 자료형 (py. dict)

### 객체 구조
- 중괄호를 이용해 작성
- 중괄호 안에는 key:value 쌍으로 구성된 속성(property)를 여러 개 작성 가능
- key는 문자형만 허용
- value 는 모든 자료형 허용 : 편식 안함. 함수마저 먹어버림

### 속성 참조 
- 점('.', chainig operator) 또는 대괄호([])로 객체 요소 접근
- key 이름에 띄어쓰기 같은 구분자가 있으면 대괄호 접근만 가능
- 유저.키 = '할당 값'  - 이렇게 할당합니다.


## 객체와 함수
Method : 객체 속성에 정의된 함수

이전 object의 greeting 또한 method 로 볼 수 있다.

메서드는 객체를'행동' 할 수 있게 한다. 
메서드 호출
console.log(user.greeting())

### [this keyword](한일.md/#this--js에-암묵적으로-전달되는-키워드--가리키는-대상이-호출-방식에-따라-다르다)
함수나 메서드를 호출한 객체를 가리키는 키워드 
> 함수 내에서 객체의 속성 및 메서드에 접근하기 위해 사용

JavaScriot에서 this는 함수를 "호출하는 방법"에 따라 가리키는 대상이 다르다 


1. 단순 호출 시 this
- 가리키는 대상 => 전역 객체
2. 메서드 호출 시 this
- 가리키는 대상 => 메서드를 호출한 객체
3. 중첩된 함수에서의 this 문제점과 해결책
"화살표 함수는 자신의 this를 가지지 않기 때문에" 외부 함수에서의 this 값을 가져온다.

JavaScript 'this' 정리
- JavaScript에서 this 는 함수가 호출되는 방식 에 따라 결정되는 현재 객체를 나타냄
- asd 58

### 객체 ( 또 ? )
1. 단축 속성 
  - 키 이름과 값으로 쓰이는 변수의 이름이 같은 경우 단축 구문을 사용할 수 있음
2. 단축 메서드
  - 메서드 선언 시 function 키워드 생략 가능
3.계산된 속성 (computed property name)
  - 키가 대괄호 [] 로 둘러싸여 있는 속성
  - > 고정된 값이 아닌 변수 값을 활용 가능
4. 구조 분해 할당 (destructing assignment)
   - 배열 또는 객체를 분해하여 속성을 변수에 쉽게 할당할 수 있는 문법
   - 함수의 매개변수로 객체 구조 분해 할당 활용 가능
     - 언패킹해서 들어가는건가? 자동으로 분해해서 넣을 수 있다? *★유용★* 
![Alt text](image.png)
- 마지막줄이 왼쪽의 const 세 줄과 같다.

5. Objecdt with '전개 구문'
   - "객체 복사"
     - 객체 내부에서 객체 전개
   - 얕은 복사에 활용 가능


6. 유용한 객체 메서드 
  - Object.keys()
  - Object.values()

7. Optioanl chaining ('?.') 
  - 속성이 없는 중첩 객체를 에러 없이 접근할 수 있음 
  - 만약 참조 대상이 null 도는 undefined 라면 에러가 발생하는 것 대신 평가를 멈추고 undefined 를 반환
   - ?. 앞을 본다  고 생각하자 
   - 만약에 ?. 가 없다면 && 연산자를 사용해야 한다.
   - 장점 :
     - 참조가 누락될 가능성이 있는 경우 연결된 속성으로 접근할 때 더 짧고 간단한 표현식을 작성할 수 있다. 
     - 어떤 속성이 필요한지에 대한 보증이 확실하지 않는 경우에 객체의 내용을 보다 편리하게 탐색할 수 있다.
   - 주의사항:
     1. Optional chaining은 존재하지 않아도 괜찮은 대상에만 사용해야 한다. 남용 X
     > 왼쪽 평가대상이 없어도 괜찮은 경우에만 "선택적"으로 사용
     3. Optional chaining 앞의 변수는 반드시 선언되어 있어야 함

## JSON
- "JavaScript Object Notation"
- Key-value 형태로 이루어진 자료 표기법
- JavaScript의 Object와 유사한 구조를 가지고 있지만 JSON은 형식이 있는 "문자열"
- JavaScript에서 JSON 을 사용하기 위해서는 *Object*자료형으로 변경해야 한다.

### Object <=> JSON 변환
1. ob to json
  JSON.stringify  
2. json to obj 
  JSON.parse

### new 연산자
- JS 에서 객체를 하나 생성? 
  - 하나의 객체 선언해서...

new

# 참고
JavaScript 'this' 장단점
- this 가 미리 정해지지 않고 호출 방식에 의해 결정되는 것은 
- 장점 : 
  - 함수(메서드)를 하나만 만들어 여러 객체에서 재사용 할 수 있다는 것
- 단점 : 
  - 이런 유연함이 실수로 이어질 수 있다.
> 개발자는 this의 동작방식을 충분히 이해하고 장점을 취하며, 실수를 피하는데 집중해야 함

## 배열
Object : 키로 구분된 데이터 집합(data collection)을 저장하는 자료형
> 이제는 순서가 있는 collection이 필요하다.

**Array : 순서가 있는 데이터 집합을 저장하는 자료구조**

### 배열 구조
- 대괄호 이용 작성 []
- 배열 요소 자료형 : 제약 X
- length 속성을 사용해 배열에 담긴 요소가 몇 개인지 알 수 있음 (기본속성!!!!!!!!)
- JavaScript에는 음수 인덱스가 없음!!!


### 배열 메서드
주요 메서드 : push pop unshift shift
  - push pop 배열 끝 요소 추가 / 제거
  - unshift shift 배열 앞 요소 추가 / 제거 

1. pop() : 배열 끝 요소를 제거하고, 제거한 요소 *반환*
2. push() : 배열 끝에 요소를 추가
3. shift() : 배열 앞 요소를 **제거**하고, **제거**한 요소를 반환
4. unshift() : 배열 앞에 요소를 **추가** 
   
### Array helper method
배열이 중요한 이유 : 배열을 도와주는 특이한 구조의 method로 인해  `극도로 중요`
- 배열을 순회하며 특정 로직을 수행하는 메서드
- > 메서드 호출 시 인자로 함수를 받는 것이 특징 (콜백 함수)

foreach : 인자로 주어진 함수(콜백함수)를 배열 요소 각각에 대해 실행  
map : 배열 내의 모든 요소 각각에 대해 함수(콜백함수)를 호출하고 함수 호출 결과를 모아 새로운 배열을 반환

#### forEach() 
arr.forEach(callbackFunction(item배열요소[, index[, array]]))

콜백함수는 3개의 매개변수 구성
1. item : 처리할 배열의 요소
2. index : 처리할 배열 요소의 인덱스 (선택_)
3. array : forEach를 호출한 배열 (선택)
- 반환값 : undefined

#### 콜백함수 (Callback function)
다른 함수에 인자로 전달되는 함수
- > 외부 함수 내에서 호출되어 일종의 루틴이나 특정 작업을 진행

#### map()
배열 내의 모든 요소 각각에 대해 함수를 호출하고, 함수 호출 결과를 모아 `새로운 배열을 반환`

- 문법 구조는 forEach 와 비슷함.
- map method에는 return이 들어간다.
- 새로운 배열 반환!! // 할당도 하슈.


### 배열 순회 종합

![Alt text](image-1.png)

for in 은 배열에서 안쓸 것 (속성만 열거하니까)

forEach 그는 신이야


#### 정리

1. Array with '전개구문'
  배열 복사
2. 기타 Array Helper Methods
   1. MDN 구경 ㄱ
   ![Alt text](image-2.png)

#### 왜? 씀 ?
1. 함수의 재사용성 측면
   1. 함수를 호출하는 코드에서 콜백 함수의 동작을 자유롭게 변경할 수 있음
   2. 예를 들어 map 함수는 
2. 비동기적 처리 측면 (병렬처리)
   - 예 : setTimeout 함수는 콜백 함수를 인자로 받아 일정 시간이 지난 후에 실행됨 
   - 이때 , setTimeout 함수는 비동기적으로 콜백 함수를 실행하므로, 다른 코드의 실행을 방해하지 않는다.

#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### 배열은 객체다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

reduce - 초기화가 필요한 경우가 있다.